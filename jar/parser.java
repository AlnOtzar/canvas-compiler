
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package unam.aragon.mx;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import unam.aragon.mx.ComandoGlobal;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\006\000\002\004\006\000" +
    "\002\004\006\000\002\004\006\000\002\004\006\000\002" +
    "\004\004\000\002\004\005\000\002\004\004\000\002\004" +
    "\003\000\002\006\003\000\002\006\004\000\002\011\002" +
    "\000\002\005\016\000\002\005\013\000\002\005\013\000" +
    "\002\005\013\000\002\005\013\000\002\005\013\000\002" +
    "\005\013\000\002\005\013\000\002\005\013\000\002\005" +
    "\013\000\002\005\013\000\002\005\003\000\002\005\004" +
    "\000\002\005\005\000\002\005\006\000\002\005\007\000" +
    "\002\005\005\000\002\005\010\000\002\005\011\000\002" +
    "\007\003\000\002\007\004\000\002\010\013\000\002\010" +
    "\015\000\002\010\011\000\002\010\013\000\002\010\013" +
    "\000\002\010\015" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\012\003\010\007\007\010\011\011\004\001" +
    "\002\000\016\002\ufff2\003\035\007\ufff2\010\ufff2\011\034" +
    "\015\036\001\002\000\014\002\000\003\010\007\007\010" +
    "\011\011\004\001\002\000\004\002\032\001\002\000\006" +
    "\003\030\017\031\001\002\000\006\015\024\017\025\001" +
    "\002\000\006\003\013\015\014\001\002\000\014\002\uffff" +
    "\003\uffff\007\uffff\010\uffff\011\uffff\001\002\000\016\002" +
    "\ufff5\003\ufff5\004\022\007\ufff5\010\ufff5\011\ufff5\001\002" +
    "\000\006\003\015\004\016\001\002\000\016\002\ufff4\003" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\017\021\001\002\000\006" +
    "\003\017\017\020\001\002\000\014\002\ufff6\003\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\001\002\000\014\002\ufffa\003\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\001\002\000\014\002\ufff7\003" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\001\002\000\004\017\023" +
    "\001\002\000\014\002\ufff8\003\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\001\002\000\004\004\026\001\002\000\014\002\ufffc" +
    "\003\ufffc\007\ufffc\010\ufffc\011\ufffc\001\002\000\004\017" +
    "\027\001\002\000\014\002\ufff9\003\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\001\002\000\014\002\ufffb\003\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\001\002\000\014\002\ufffd\003\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\001\002\000\004\002\001\001\002\000" +
    "\014\002\ufffe\003\ufffe\007\ufffe\010\ufffe\011\ufffe\001\002" +
    "\000\004\015\220\001\002\000\004\020\210\001\002\000" +
    "\016\002\uffe3\003\041\007\uffe3\010\uffe3\011\uffe3\020\040" +
    "\001\002\000\014\002\ufff3\003\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\001\002\000\020\002\uffe2\003\140\006\137\007\uffe2" +
    "\010\uffe2\011\uffe2\021\141\001\002\000\004\006\042\001" +
    "\002\000\004\016\043\001\002\000\004\006\044\001\002" +
    "\000\004\021\045\001\002\000\004\023\046\001\002\000" +
    "\012\005\047\012\052\013\053\014\050\001\002\000\004" +
    "\015\105\001\002\000\004\020\077\001\002\000\016\003" +
    "\uffdb\005\uffdb\012\uffdb\013\uffdb\014\uffdb\022\uffdb\001\002" +
    "\000\004\020\067\001\002\000\004\020\057\001\002\000" +
    "\014\005\047\012\052\013\053\014\050\022\055\001\002" +
    "\000\014\002\uffec\003\uffec\007\uffec\010\uffec\011\uffec\001" +
    "\002\000\016\003\uffda\005\uffda\012\uffda\013\uffda\014\uffda" +
    "\022\uffda\001\002\000\004\006\060\001\002\000\004\016" +
    "\061\001\002\000\004\006\062\001\002\000\004\016\063" +
    "\001\002\000\004\004\064\001\002\000\004\021\065\001" +
    "\002\000\004\017\066\001\002\000\016\003\uffd5\005\uffd5" +
    "\012\uffd5\013\uffd5\014\uffd5\022\uffd5\001\002\000\004\006" +
    "\070\001\002\000\004\016\071\001\002\000\004\006\072" +
    "\001\002\000\004\016\073\001\002\000\004\004\074\001" +
    "\002\000\004\021\075\001\002\000\004\017\076\001\002" +
    "\000\016\003\uffd9\005\uffd9\012\uffd9\013\uffd9\014\uffd9\022" +
    "\uffd9\001\002\000\004\006\100\001\002\000\004\016\101" +
    "\001\002\000\004\004\102\001\002\000\004\021\103\001" +
    "\002\000\004\017\104\001\002\000\016\003\uffd7\005\uffd7" +
    "\012\uffd7\013\uffd7\014\uffd7\022\uffd7\001\002\000\010\012" +
    "\107\013\110\014\106\001\002\000\004\020\131\001\002" +
    "\000\004\020\121\001\002\000\004\020\111\001\002\000" +
    "\004\006\112\001\002\000\004\016\113\001\002\000\004" +
    "\006\114\001\002\000\004\016\115\001\002\000\004\004" +
    "\116\001\002\000\004\021\117\001\002\000\004\017\120" +
    "\001\002\000\016\003\uffd4\005\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\022\uffd4\001\002\000\004\006\122\001\002\000\004" +
    "\016\123\001\002\000\004\006\124\001\002\000\004\016" +
    "\125\001\002\000\004\004\126\001\002\000\004\021\127" +
    "\001\002\000\004\017\130\001\002\000\016\003\uffd8\005" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\022\uffd8\001\002\000\004" +
    "\006\132\001\002\000\004\016\133\001\002\000\004\004" +
    "\134\001\002\000\004\021\135\001\002\000\004\017\136" +
    "\001\002\000\016\003\uffd6\005\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\022\uffd6\001\002\000\016\002\uffe1\003\157\007\uffe1" +
    "\010\uffe1\011\uffe1\016\156\001\002\000\006\003\143\016" +
    "\142\001\002\000\014\002\uffde\003\uffde\007\uffde\010\uffde" +
    "\011\uffde\001\002\000\004\006\151\001\002\000\004\003" +
    "\144\001\002\000\004\021\145\001\002\000\004\023\146" +
    "\001\002\000\012\005\047\012\052\013\053\014\050\001" +
    "\002\000\014\005\047\012\052\013\053\014\050\022\150" +
    "\001\002\000\014\002\uffea\003\uffea\007\uffea\010\uffea\011" +
    "\uffea\001\002\000\004\021\152\001\002\000\004\023\153" +
    "\001\002\000\012\005\047\012\052\013\053\014\050\001" +
    "\002\000\014\005\047\012\052\013\053\014\050\022\155" +
    "\001\002\000\014\002\uffeb\003\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\001\002\000\016\002\uffe0\003\166\006\165\007\uffe0" +
    "\010\uffe0\011\uffe0\001\002\000\004\006\160\001\002\000" +
    "\004\021\161\001\002\000\004\023\162\001\002\000\012" +
    "\005\047\012\052\013\053\014\050\001\002\000\014\005" +
    "\047\012\052\013\053\014\050\022\164\001\002\000\014" +
    "\002\uffe9\003\uffe9\007\uffe9\010\uffe9\011\uffe9\001\002\000" +
    "\016\002\uffdf\003\173\007\uffdf\010\uffdf\011\uffdf\021\174" +
    "\001\002\000\004\021\167\001\002\000\004\023\170\001" +
    "\002\000\012\005\047\012\052\013\053\014\050\001\002" +
    "\000\014\005\047\012\052\013\053\014\050\022\172\001" +
    "\002\000\014\002\uffe8\003\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\001\002\000\004\023\205\001\002\000\016\002\uffdd\003" +
    "\175\007\uffdd\010\uffdd\011\uffdd\023\176\001\002\000\012" +
    "\005\047\012\052\013\053\014\050\001\002\000\024\002" +
    "\uffdc\003\177\005\047\007\uffdc\010\uffdc\011\uffdc\012\052" +
    "\013\053\014\050\001\002\000\004\022\202\001\002\000" +
    "\014\003\201\005\047\012\052\013\053\014\050\001\002" +
    "\000\014\002\uffe4\003\uffe4\007\uffe4\010\uffe4\011\uffe4\001" +
    "\002\000\014\002\uffe5\003\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\001\002\000\014\005\047\012\052\013\053\014\050\022" +
    "\204\001\002\000\014\002\uffe6\003\uffe6\007\uffe6\010\uffe6" +
    "\011\uffe6\001\002\000\012\005\047\012\052\013\053\014" +
    "\050\001\002\000\014\005\047\012\052\013\053\014\050" +
    "\022\207\001\002\000\014\002\uffe7\003\uffe7\007\uffe7\010" +
    "\uffe7\011\uffe7\001\002\000\004\006\211\001\002\000\004" +
    "\016\212\001\002\000\004\006\213\001\002\000\004\021" +
    "\214\001\002\000\004\023\215\001\002\000\012\005\047" +
    "\012\052\013\053\014\050\001\002\000\014\005\047\012" +
    "\052\013\053\014\050\022\217\001\002\000\014\002\uffed" +
    "\003\uffed\007\uffed\010\uffed\011\uffed\001\002\000\004\020" +
    "\221\001\002\000\004\006\222\001\002\000\004\016\223" +
    "\001\002\000\004\006\224\001\002\000\004\021\225\001" +
    "\002\000\004\023\226\001\002\000\012\005\uffef\012\uffef" +
    "\013\uffef\014\uffef\001\002\000\012\005\047\012\052\013" +
    "\053\014\050\001\002\000\014\005\047\012\052\013\053" +
    "\014\050\022\231\001\002\000\004\017\232\001\002\000" +
    "\014\002\uffee\003\uffee\007\uffee\010\uffee\011\uffee\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\010\002\005\003\004\004\011\001\001\000" +
    "\004\005\036\001\001\000\004\004\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\053" +
    "\010\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\146\010\050\001\001\000\004\010\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\153\010\050\001\001\000\004\010\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\162\010\050\001" +
    "\001\000\004\010\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\170\010\050\001\001\000\004\010\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\202\010\050\001\001\000\006\007\177\010\050\001\001" +
    "\000\002\001\001\000\004\010\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\055\001\001\000\002" +
    "\001\001\000\006\007\205\010\050\001\001\000\004\010" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\215\010\050\001\001\000\004\010\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\226\001\001\000\006\007" +
    "\227\010\050\001\001\000\004\010\055\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado = "";
    public static LinkedList<TError> TablaES = new LinkedList<TError>();
    public static LinkedList<String> comandos = new LinkedList<>();

    // Variables para almacenar la última posición X y Y,
    // que se usan como punto de origen para las figuras dentro de un
    // bloque 'posicion'
    Integer NUM;
    String C, ID;
    private int currentPosX = 0;
    private int currentPosY = 0;

    private boolean errorRecuperado = false;

    private String mensajeErrorPersonalizado = null;

    public void syntax_error(Symbol s) {
        if (errorRecuperado) {
            errorRecuperado = false;
            return;
        }
        if (s == null) return;
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        if (s == null || s.value == null) return;

        String lexema = s.value.toString();
        int fila = (s.left >= 0) ? s.left + 1 : -1;
        int columna = (s.right >= 0) ? s.right + 1 : -1;

        TablaES.add(new TError(lexema, fila, columna, "Error Sintáctico", "Caracter no esperado (no recuperable)"));
    }

    public void registrarError(Symbol sym, String descripcion) {
        int fila = (sym != null && sym.left >= 0) ? sym.left + 1 : -1;
        int columna = (sym != null && sym.right >= 0) ? sym.right + 1 : -1;
        String lexema = (sym != null && sym.value != null) ? sym.value.toString() : "EOF";
        TablaES.add(new TError(lexema, fila, columna, "Error Sintáctico", descripcion));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= Lpr PUNTOCOMA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                                 Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2 + 1);
                                 ComandoGlobal.comandos.add("lpr");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= error PUNTOCOMA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2 + 1);
                           registrarError(sym, "Falta el identificador de instrucción (limpiar)");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= Lpr error 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                               Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2 + 2);
                               registrarError(sym, "Falta el identificador de instrucción (;)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= F IGUAL C PUNTOCOMA 
            {
              Object RESULT =null;
		
            String colorTexto = (String)((Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            ComandoGlobal.comandos.add("f," + colorTexto);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= error IGUAL C PUNTOCOMA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 1);
                   registrarError(sym, "Falta el identificador de instrucción (limpiar)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= F error C PUNTOCOMA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                       Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 2);
                       registrarError(sym, "Falta el identificador de instrucción (=)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= F IGUAL error PUNTOCOMA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                       Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 3);
                       registrarError(sym, "Falta el identificador de instrucción (color)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= F IGUAL C error 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                       Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 4);
                       registrarError(sym, "Falta el identificador de instrucción (;)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= F error 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 2);
                           registrarError(sym, "Faltan los identificadores de instrucciónes ( =, color , ; )"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= F IGUAL error 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 3);
                           registrarError(sym, "Faltan los identificadores de instrucciónes ( color , ; )"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= Ps encabezado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= Ps 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                            Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1 + 1);
                            registrarError(sym, "Comando incompleto '=(x,y){figura};'");
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // encabezados ::= encabezado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezados",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // encabezados ::= encabezados encabezado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezados",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$0 ::= 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

        ComandoGlobal.ultimaPosicionX = x.intValue();
        ComandoGlobal.ultimaPosicionY = y.intValue();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // encabezado ::= Ps IGUAL PAR_ABRE NUM COMA NUM PAR_CIERRA LLAVE_ABRE NT$0 figuras LLAVE_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // encabezado ::= error PAR_ABRE NUM COMA NUM PAR_CIERRA LLAVE_ABRE figuras LLAVE_CIERRA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 1);
           registrarError(sym, "Falta un '='"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // encabezado ::= IGUAL error NUM COMA NUM PAR_CIERRA LLAVE_ABRE figuras LLAVE_CIERRA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 2);
           registrarError(sym, "Falta un '('"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // encabezado ::= IGUAL PAR_ABRE error COMA NUM PAR_CIERRA LLAVE_ABRE figuras LLAVE_CIERRA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 3);
           registrarError(sym, "Falta el primer número entre los parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // encabezado ::= IGUAL PAR_ABRE error error error PAR_CIERRA LLAVE_ABRE figuras LLAVE_CIERRA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 3);
           registrarError(sym, "Faltan los parámetros correctamente escritos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // encabezado ::= IGUAL PAR_ABRE NUM error NUM PAR_CIERRA LLAVE_ABRE figuras LLAVE_CIERRA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 4);
           registrarError(sym, "Falta una coma ',' entre los parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // encabezado ::= IGUAL PAR_ABRE NUM COMA error PAR_CIERRA LLAVE_ABRE figuras LLAVE_CIERRA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 5);
           registrarError(sym, "Falta el segundo número entre los parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // encabezado ::= IGUAL PAR_ABRE NUM COMA NUM error LLAVE_ABRE figuras LLAVE_CIERRA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 6);
           registrarError(sym, "Falta un ')'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // encabezado ::= IGUAL PAR_ABRE NUM COMA NUM PAR_CIERRA error figuras LLAVE_CIERRA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 7);
           registrarError(sym, "Falta un '{'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // encabezado ::= IGUAL PAR_ABRE NUM COMA NUM PAR_CIERRA LLAVE_ABRE error LLAVE_CIERRA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 8);
           registrarError(sym, "Falta que introduzcas una figura de la forma 'tipoFigura (ancho, alto, color);'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // encabezado ::= IGUAL PAR_ABRE NUM COMA NUM PAR_CIERRA LLAVE_ABRE figuras error 
            {
              Object RESULT =null;
		 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 9);
           registrarError(sym, "Falta cerrar con '}'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // encabezado ::= IGUAL 
            {
              Object RESULT =null;
		 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "Comando incompleto, falta '(x,y){figura}'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // encabezado ::= IGUAL PAR_ABRE 
            {
              Object RESULT =null;
		 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "Comando incompleto, falta 'x,y){figura}'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // encabezado ::= IGUAL PAR_ABRE NUM 
            {
              Object RESULT =null;
		 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "Comando incompleto, falta ',y){figura}'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // encabezado ::= IGUAL PAR_ABRE NUM COMA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "Comando incompleto, falta 'y){figura}'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // encabezado ::= IGUAL PAR_ABRE NUM COMA NUM 
            {
              Object RESULT =null;
		 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "Comando incompleto, falta '){figura}'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // encabezado ::= IGUAL PAR_ABRE PAR_CIERRA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "Faltan coordenadas entre los paréntesis"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // encabezado ::= IGUAL PAR_ABRE NUM COMA NUM PAR_CIERRA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "Falta la figura dentro de las llaves"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // encabezado ::= IGUAL PAR_ABRE NUM COMA NUM PAR_CIERRA LLAVE_ABRE 
            {
              Object RESULT =null;
		 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "Falta la figura antes de cerrar con '}'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // figuras ::= figura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("figuras",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // figuras ::= figuras figura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("figuras",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // figura ::= Rec PAR_ABRE NUM COMA NUM COMA C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer alto = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        ComandoGlobal.comandos.add("rec," +
            ComandoGlobal.ultimaPosicionX + "," +
            ComandoGlobal.ultimaPosicionY + "," +
            ancho + "," + alto + "," + color);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // figura ::= ID IGUAL Rec PAR_ABRE NUM COMA NUM COMA C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int nombretokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int nombretokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String nombretoken = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer alto = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        ComandoGlobal.comandos.add("fig_nombrada," + nombretoken + ",rec," +
            ComandoGlobal.ultimaPosicionX + "," +
            ComandoGlobal.ultimaPosicionY + "," +
            ancho + "," + alto + "," + color);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // figura ::= Cir PAR_ABRE NUM COMA C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int radioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int radioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer radio = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        ComandoGlobal.comandos.add("cir," +
            ComandoGlobal.ultimaPosicionX + "," +
            ComandoGlobal.ultimaPosicionY + "," +
            radio + "," + color);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // figura ::= ID IGUAL Cir PAR_ABRE NUM COMA C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int nombretokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nombretokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String nombretoken = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int radioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int radioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer radio = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        ComandoGlobal.comandos.add("fig_nombrada," + nombretoken + ",cir," +
            ComandoGlobal.ultimaPosicionX + "," +
            ComandoGlobal.ultimaPosicionY + "," +
            radio + "," + color);  // CAMBIO: radio en lugar de radioVal
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // figura ::= Ln PAR_ABRE NUM COMA NUM COMA C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int x2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer x2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int y2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int y2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer y2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        ComandoGlobal.comandos.add("ln," +
            ComandoGlobal.ultimaPosicionX + "," +
            ComandoGlobal.ultimaPosicionY + "," +
            x2 + "," + y2 + "," + color);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // figura ::= ID IGUAL Ln PAR_ABRE NUM COMA NUM COMA C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int nombretokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int nombretokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String nombretoken = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer x2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int y2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int y2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer y2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        ComandoGlobal.comandos.add("fig_nombrada," + nombretoken + ",ln," +
            ComandoGlobal.ultimaPosicionX + "," +
            ComandoGlobal.ultimaPosicionY + "," +
            x2 + "," + y2 + "," + color);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
