package unam.aragon.mx;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import unam.aragon.mx.ComandoGlobal;

parser code
{:
    public String resultado = "";
    public static LinkedList<TError> TablaES = new LinkedList<TError>();
    public static LinkedList<String> comandos = new LinkedList<>();

    private boolean errorRecuperado = false;

    private String mensajeErrorPersonalizado = null;

    public void syntax_error(Symbol s) {
        if (errorRecuperado) {
            errorRecuperado = false;
            return;
        }

        if (s == null) return;


    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        if (s == null || s.value == null) return;

        String lexema = s.value.toString();
        int fila = (s.left >= 0) ? s.left + 1 : -1;
        int columna = (s.right >= 0) ? s.right + 1 : -1;

        TablaES.add(new TError(lexema, fila, columna, "Error Sintáctico", "Caracter no esperado (no recuperable)"));
    }

    public void registrarError(Symbol sym, String descripcion) {
        int fila = (sym != null && sym.left >= 0) ? sym.left + 1 : -1;
        int columna = (sym != null && sym.right >= 0) ? sym.right + 1 : -1;
        String lexema = (sym != null && sym.value != null) ? sym.value.toString() : "EOF";
        TablaES.add(new TError(lexema, fila, columna, "Error Sintáctico", descripcion));
    }
:}



terminal String C;
terminal
    Lpr, F, Ps, Rec, Ln, Cir,
    IGUAL, COMA, PUNTOCOMA, PAR_ABRE, PAR_CIERRA, LLAVE_CIERRA, LLAVE_ABRE,
    NUM;

non terminal programa, instrucciones, instruccion, encabezado,encabezados, figuras, figura ;


start with programa;


programa ::= instrucciones;

instrucciones ::= instruccion
               | instrucciones instruccion;

instruccion ::=
      Lpr PUNTOCOMA
      {: errorRecuperado = true;
                                 Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2 + 1);
                                 ComandoGlobal.comandos.add("lpr");:}
    | error PUNTOCOMA
        {: errorRecuperado = true;
                           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2 + 1);
                           registrarError(sym, "Falta el identificador de instrucción (limpiar)");:}
    | Lpr error
            {: errorRecuperado = true;
                               Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2 + 2);
                               registrarError(sym, "Falta el identificador de instrucción (;)"); :}

    | F IGUAL C PUNTOCOMA
        {:
            String colorTexto = (String)((Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            ComandoGlobal.comandos.add("f," + colorTexto);
        :}
    | error IGUAL C PUNTOCOMA
        {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 1);
                   registrarError(sym, "Falta el identificador de instrucción (limpiar)"); :}
    | F error C PUNTOCOMA
            {: errorRecuperado = true;
                       Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 2);
                       registrarError(sym, "Falta el identificador de instrucción (=)"); :}
    | F IGUAL error PUNTOCOMA
            {: errorRecuperado = true;
                       Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 3);
                       registrarError(sym, "Falta el identificador de instrucción (color)"); :}
    | F IGUAL C error
            {: errorRecuperado = true;
                       Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 4);
                       registrarError(sym, "Falta el identificador de instrucción (;)"); :}
    | F error
            {: errorRecuperado = true;
                           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 2);
                           registrarError(sym, "Faltan los identificadores de instrucciónes ( =, color , ; )"); :}
    | F IGUAL error
            {: errorRecuperado = true;
                           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 3);
                           registrarError(sym, "Faltan los identificadores de instrucciónes ( color , ; )"); :}
   | Ps encabezado figuras LLAVE_CIERRA PUNTOCOMA;

encabezados ::=
    encabezado
    | encabezados encabezado;
encabezado ::=
     IGUAL PAR_ABRE NUM COMA NUM PAR_CIERRA LLAVE_ABRE
        {:
            int px = Integer.parseInt(((Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).value.toString());
            int py = Integer.parseInt(((Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value.toString());
            ComandoGlobal.comandos.add("ps," + px + "," + py);
        :}
    |IGUAL PAR_ABRE NUM COMA NUM PAR_CIERRA LLAVE_ABRE
        {: errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8 + 1);
           registrarError(sym, "Falta el identificador de instrucción (Ps)"); :}

    |error PAR_ABRE NUM COMA NUM PAR_CIERRA LLAVE_ABRE
        {: errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8 + 2);
           registrarError(sym, "Falta un '='"); :}

    |IGUAL error NUM COMA NUM PAR_CIERRA LLAVE_ABRE
        {: errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8 + 3);
           registrarError(sym, "Falta un '('"); :}

    |IGUAL PAR_ABRE error COMA NUM PAR_CIERRA LLAVE_ABRE
        {: errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8 + 4);
           registrarError(sym, "Falta el primer número"); :}

    |IGUAL PAR_ABRE NUM error NUM PAR_CIERRA LLAVE_ABRE
        {: errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8 + 5);
           registrarError(sym, "Falta una coma ',' entre los parámetros"); :}

    |IGUAL PAR_ABRE NUM COMA error PAR_CIERRA LLAVE_ABRE
            {: errorRecuperado = true;
               Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8 + 6);
               registrarError(sym, "Falta un '{'"); :}
    |IGUAL PAR_ABRE NUM COMA NUM error LLAVE_ABRE
                {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8 + 7);
                   registrarError(sym, "Falta un '{'"); :}
    |IGUAL PAR_ABRE NUM COMA NUM PAR_CIERRA error
                {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8 + 8);
                   registrarError(sym, "Falta un '{'"); :}

    |IGUAL
        {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1 + 1);
                   registrarError(sym, "Comando incompleto, debe ser de la forma 'posicion=(x,y){figura};'"); :}
    |IGUAL PAR_ABRE
        {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2 + 2);
                   registrarError(sym, "Comando incompleto, debe ser de la forma 'posicion=(x,y){figura};'"); :}
    |IGUAL PAR_ABRE NUM
        {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3 + 3);
                   registrarError(sym, "Comando incompleto, debe ser de la forma 'posicion=(x,y){figura};'"); :}
    |IGUAL PAR_ABRE NUM COMA
        {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 4);
                   registrarError(sym, "Comando incompleto, debe ser de la forma 'posicion=(x,y){figura};'"); :}
    |IGUAL PAR_ABRE NUM COMA NUM
        {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5 + 6);
                   registrarError(sym, "Comando incompleto, debe ser de la forma 'posicion=(x,y){figura};'"); :}
    |IGUAL PAR_ABRE NUM COMA NUM PAR_CIERRA
        {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6 + 6);
                   registrarError(sym, "Comando incompleto, debe ser de la forma 'posicion=(x,y){figura};'"); :}
    |IGUAL PAR_ABRE NUM COMA NUM PAR_CIERRA LLAVE_ABRE
        {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7 + 7);
                   registrarError(sym, "Comando incompleto, debe ser de la forma 'posicion=(x,y){figura};'"); :};


figuras ::=
    figura
    | figuras figura;


figura ::=
    Rec IGUAL PAR_ABRE NUM COMA NUM COMA C PAR_CIERRA PUNTOCOMA
    {:
        int ancho = Integer.parseInt(((Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 6)).value.toString());
        int alto = Integer.parseInt(((Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).value.toString());
        String col = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value.toString();
        ComandoGlobal.comandos.add("rec," + ancho + "," + alto + "," + col);
    :}
  | Cir IGUAL PAR_ABRE NUM COMA C PAR_CIERRA PUNTOCOMA
    {:
        int radio = Integer.parseInt(((Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).value.toString());
        String col = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value.toString();
        ComandoGlobal.comandos.add("cir," + radio + "," + col);
    :}
  | Ln IGUAL PAR_ABRE NUM COMA NUM COMA C PAR_CIERRA PUNTOCOMA
    {:
        int x2 = Integer.parseInt(((Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 6)).value.toString());
        int y2 = Integer.parseInt(((Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).value.toString());
        String col = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).value.toString();
        ComandoGlobal.comandos.add("ln," + x2 + "," + y2 + "," + col);
    :}
  | Lpr PUNTOCOMA
     {: errorRecuperado = true;
        Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2 + 1);
        ComandoGlobal.comandos.add("lpr");:};


