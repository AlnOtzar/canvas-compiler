package unam.aragon.mx;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import unam.aragon.mx.ComandoGlobal;

parser code
{:
    public String resultado = "";
    public static LinkedList<TError> TablaES = new LinkedList<TError>();
    public static LinkedList<String> comandos = new LinkedList<>();

    // Variables para almacenar la última posición X y Y,
    // que se usan como punto de origen para las figuras dentro de un
    // bloque 'posicion'
    Integer NUM;
    String C, ID;
    private int currentPosX = 0;
    private int currentPosY = 0;

    private boolean errorRecuperado = false;

    private String mensajeErrorPersonalizado = null;

    public void syntax_error(Symbol s) {
        if (errorRecuperado) {
            errorRecuperado = false;
            return;
        }
        if (s == null) return;
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        if (s == null || s.value == null) return;

        String lexema = s.value.toString();
        int fila = (s.left >= 0) ? s.left + 1 : -1;
        int columna = (s.right >= 0) ? s.right + 1 : -1;

        TablaES.add(new TError(lexema, fila, columna, "Error Sintáctico", "Caracter no esperado (no recuperable)"));
                        ComandoGlobal.compiladoCorrectamente = false;
    }

    public void registrarError(Symbol sym, String descripcion) {
        int fila = (sym != null && sym.left >= 0) ? sym.left + 1 : -1;
        int columna = (sym != null && sym.right >= 0) ? sym.right + 1 : -1;
        String lexema = (sym != null && sym.value != null) ? sym.value.toString() : "EOF";
        TablaES.add(new TError(lexema, fila, columna, "Error Sintáctico", descripcion));
                                ComandoGlobal.compiladoCorrectamente = false;
    }
:}



terminal String C, ID;
terminal Integer NUM;
terminal
    Lpr, F, Ps, Rec, Ln, Cir,
    IGUAL, COMA, PUNTOCOMA, PAR_ABRE, PAR_CIERRA, LLAVE_CIERRA, LLAVE_ABRE,

    Mv, While, Arriba, Abajo, Derecha, Izquierda, INCREMENTO,
    MENOR_QUE, MIENTRAS, CONTADOR;


non terminal programa, instrucciones, instruccion, encabezado,
             encabezados, figuras, figura, mover, animacion, direccion, comparador,
             bloque, bloque_figuras;


start with programa;


programa ::= instrucciones;

instrucciones ::= instruccion
               | instrucciones instruccion;

instruccion ::=
      Lpr PUNTOCOMA
      {: errorRecuperado = true;
                                 Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2 + 1);
                                 ComandoGlobal.comandos.add("lpr");:}
    | error PUNTOCOMA
        {: errorRecuperado = true;
                           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2 + 1);
                           registrarError(sym, "Falta el identificador de instrucción (limpiar)");:}

    | animacion

    | Lpr error
            {: errorRecuperado = true;
                               Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2 + 2);
                               registrarError(sym, "Falta el identificador de instrucción (;)"); :}

    | F IGUAL C PUNTOCOMA
        {:
            String colorTexto = (String)((Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            ComandoGlobal.comandos.add("f," + colorTexto);
        :}
    | error IGUAL C PUNTOCOMA
        {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 1);
                   registrarError(sym, "Falta el identificador de instrucción (limpiar)"); :}
    | F error C PUNTOCOMA
            {: errorRecuperado = true;
                       Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 2);
                       registrarError(sym, "Falta el identificador de instrucción (=)"); :}
    | F IGUAL error PUNTOCOMA
            {: errorRecuperado = true;
                       Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 3);
                       registrarError(sym, "Falta el identificador de instrucción (color)"); :}
    | F IGUAL C error
            {: errorRecuperado = true;
                       Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 4);
                       registrarError(sym, "Falta el identificador de instrucción (;)"); :}
    | F error
            {: errorRecuperado = true;
                           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 2);
                           registrarError(sym, "Faltan los identificadores de instrucciónes ( =, color , ; )"); :}
    | F IGUAL error
            {: errorRecuperado = true;
                           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 3);
                           registrarError(sym, "Faltan los identificadores de instrucciónes ( color , ; )"); :}
//    | Ps encabezado
    | encabezado
                 {::};

//posicion
encabezados ::=
    encabezado
    | encabezados encabezado;

encabezado ::=

      Ps IGUAL PAR_ABRE NUM:x COMA NUM:y PAR_CIERRA
      {:
          ComandoGlobal.ultimaPosicionX = x.intValue();
          ComandoGlobal.ultimaPosicionY = y.intValue();
      :} bloque_figuras

    |error IGUAL PAR_ABRE NUM COMA NUM PAR_CIERRA
            {: errorRecuperado = true;
               Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7 + 1);
               registrarError(sym, "Falta posicion"); :} bloque_figuras

    |Ps error PAR_ABRE NUM COMA NUM PAR_CIERRA
        {: errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7 + 2);
           registrarError(sym, "Falta un '='"); :} bloque_figuras

    |Ps IGUAL error NUM COMA NUM PAR_CIERRA
        {: errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7 + 3);
           registrarError(sym, "Falta un '('"); :} bloque_figuras

    |Ps IGUAL PAR_ABRE error COMA NUM PAR_CIERRA
        {: errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7 + 4);
           registrarError(sym, "Falta el primer número entre los parámetros"); :} bloque_figuras

    |Ps IGUAL PAR_ABRE error PAR_CIERRA
        {: errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5 +4);
           registrarError(sym, "Faltan los parámetros correctamente escritos"); :} bloque_figuras

    |Ps IGUAL PAR_ABRE NUM error NUM PAR_CIERRA
        {: errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7 + 5);
           registrarError(sym, "Falta una coma ',' entre los parámetros"); :} bloque_figuras
    |Ps IGUAL PAR_ABRE NUM COMA error PAR_CIERRA
        {: errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7 + 6);
           registrarError(sym, "Falta el segundo número entre los parámetros"); :} bloque_figuras

    |Ps IGUAL PAR_ABRE NUM COMA NUM error
        {: errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7 + 7);
           registrarError(sym, "Falta un ')'"); :}bloque_figuras

    // Casos de comandos incompletos (solo partes del encabezado)
    |Ps
            {: errorRecuperado = true;
               Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
               registrarError(sym, "Comando incompleto, falta '=(x,y){figura}'"); :}bloque_figuras
    |Ps IGUAL
        {: errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "Comando incompleto, falta '(x,y){figura}'"); :}bloque_figuras

    |Ps IGUAL PAR_ABRE
        {: errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "Comando incompleto, falta 'x,y){figura}'"); :}bloque_figuras

    |Ps IGUAL PAR_ABRE NUM
        {: errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "Comando incompleto, falta ',y){figura}'"); :}bloque_figuras

    |Ps IGUAL PAR_ABRE NUM COMA
        {: errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "Comando incompleto, falta 'y){figura}'"); :}bloque_figuras

    |Ps IGUAL PAR_ABRE NUM COMA NUM
        {: errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "Comando incompleto, falta '){figura}'"); :}bloque_figuras

    |Ps IGUAL PAR_ABRE PAR_CIERRA
        {: errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "Faltan coordenadas entre los paréntesis"); :}bloque_figuras

    |Ps IGUAL PAR_ABRE NUM COMA NUM PAR_CIERRA
        {: errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "Comando incompleto, falta '{figura}'"); :}bloque_figuras

    |Ps IGUAL PAR_ABRE PAR_CIERRA
            {: errorRecuperado = true;
               Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
               registrarError(sym, "Faltan parametros}'"); :}bloque_figuras

    |Ps IGUAL PAR_ABRE NUM COMA PAR_CIERRA
        {: errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "falta un parameto y ,"); :}bloque_figuras

    |Ps IGUAL PAR_ABRE COMA NUM PAR_CIERRA
        {: errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "falta un parameto y ,"); :}bloque_figuras;

bloque_figuras ::=
      LLAVE_ABRE figuras LLAVE_CIERRA PUNTOCOMA

    | error
                {:
                    errorRecuperado = true;
                    registrarError((Symbol) CUP$parser$stack.peek(), "Falta ingresar {'");
                :}

    | error figuras LLAVE_CIERRA PUNTOCOMA
            {:
                errorRecuperado = true;
                registrarError((Symbol) CUP$parser$stack.peek(), "Falta ingresar {'");
            :}

    | LLAVE_ABRE error LLAVE_CIERRA PUNTOCOMA
            {:
                errorRecuperado = true;
                registrarError((Symbol) CUP$parser$stack.peek(), "Falta ingresar una o varias figuras'");
            :}

    |LLAVE_ABRE figuras error PUNTOCOMA
                {:
                    errorRecuperado = true;
                    registrarError((Symbol) CUP$parser$stack.peek(), "Falta ingresar }'");
                :}
    |LLAVE_ABRE figuras LLAVE_CIERRA error
        {:
            errorRecuperado = true;
            registrarError((Symbol) CUP$parser$stack.peek(), "Falta punto y coma ';'");
        :}
    |LLAVE_ABRE figuras error
        {:
            errorRecuperado = true;
            registrarError((Symbol) CUP$parser$stack.peek(), "Faltan '}' y ';'");
        :}

    |LLAVE_ABRE
            {: errorRecuperado = true;
               Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
               registrarError(sym, "Comando incompleto, falta 'figura};'"); :}

    |LLAVE_ABRE figuras
            {: errorRecuperado = true;
               Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
               registrarError(sym, "Comando incompleto, falta '};'"); :}

    |LLAVE_ABRE figuras LLAVE_CIERRA
            {: errorRecuperado = true;
               Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
               registrarError(sym, "Comando incompleto, falta ;"); :};


figuras ::= figura
    | figuras figura;

figura ::=
    // Rectángulo sin nombre
    Rec PAR_ABRE NUM:ancho COMA NUM:alto COMA C:color PAR_CIERRA PUNTOCOMA
    {:
        ComandoGlobal.comandos.add("rec," +
            ComandoGlobal.ultimaPosicionX + "," +
            ComandoGlobal.ultimaPosicionY + "," +
            ancho + "," + alto + "," + color);
    :}

    |error PAR_ABRE NUM:ancho COMA NUM:alto COMA C:color PAR_CIERRA PUNTOCOMA
            {: errorRecuperado = true;
               Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 1);
               registrarError(sym, "Falta ingresar una figura valida"); :}

    |Rec error NUM:ancho COMA NUM:alto COMA C:color PAR_CIERRA PUNTOCOMA
                {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 2);
                   registrarError(sym, "Falta el simbolo de '('"); :}

    |Rec PAR_ABRE error COMA NUM:alto COMA C:color PAR_CIERRA PUNTOCOMA
                {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 3);
                   registrarError(sym, "Falta el valor 'ancho'"); :}

    |Rec PAR_ABRE NUM:ancho error NUM:alto COMA C:color PAR_CIERRA PUNTOCOMA
                {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 4);
                   registrarError(sym, "Falta el simbolo de ',' entre ancho y alto"); :}

    |Rec PAR_ABRE NUM:ancho COMA error COMA C:color PAR_CIERRA PUNTOCOMA
                {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 5);
                   registrarError(sym, "Falta el valor alto"); :}

    |Rec PAR_ABRE NUM:ancho COMA NUM:alto error C:color PAR_CIERRA PUNTOCOMA
                {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 6);
                   registrarError(sym, "Falta el simbolo de ',' despues del segundo valor"); :}

    |Rec PAR_ABRE NUM:ancho COMA NUM:alto COMA error PAR_CIERRA PUNTOCOMA
                {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 7);
                   registrarError(sym, "Falta ingresar el color despues de la coma y antes del )"); :}

    |Rec PAR_ABRE NUM:ancho COMA NUM:alto COMA C:color error PUNTOCOMA
                {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 8);
                   registrarError(sym, "Falta ingresar ')' despues de color"); :}

    |Rec PAR_ABRE NUM:ancho COMA NUM:alto COMA C:color PAR_CIERRA error
                {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 9);
                   registrarError(sym, "Falta ingresar ';' al final de la instruccion "); :}

    // Rectángulo con nombre
    | ID:nombretoken IGUAL Rec PAR_ABRE NUM:ancho COMA NUM:alto COMA C:color PAR_CIERRA PUNTOCOMA
    {:
        ComandoGlobal.comandos.add("fig_nombrada," + nombretoken + ",rec," +
            ComandoGlobal.ultimaPosicionX + "," +
            ComandoGlobal.ultimaPosicionY + "," +
            ancho + "," + alto + "," + color);
    :}

    // Círculo sin nombre
    | Cir PAR_ABRE NUM:radio COMA C:color PAR_CIERRA PUNTOCOMA
    {:
        ComandoGlobal.comandos.add("cir," +
            ComandoGlobal.ultimaPosicionX + "," +
            ComandoGlobal.ultimaPosicionY + "," +
            radio + "," + color);
    :}

    |Cir error NUM:ancho COMA NUM:alto COMA C:color PAR_CIERRA PUNTOCOMA
                {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 2);
                   registrarError(sym, "Falta el simbolo de '('"); :}

    |Cir PAR_ABRE error COMA NUM:alto COMA C:color PAR_CIERRA PUNTOCOMA
                {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 3);
                   registrarError(sym, "Falta el valor 'ancho'"); :}

    |Cir PAR_ABRE NUM:ancho error NUM:alto COMA C:color PAR_CIERRA PUNTOCOMA
                {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 4);
                   registrarError(sym, "Falta el simbolo de ',' entre ancho y alto"); :}

    |Cir PAR_ABRE NUM:ancho COMA error COMA C:color PAR_CIERRA PUNTOCOMA
                {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 5);
                   registrarError(sym, "Falta el valor alto"); :}

    |Cir PAR_ABRE NUM:ancho COMA NUM:alto error C:color PAR_CIERRA PUNTOCOMA
                {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 6);
                   registrarError(sym, "Falta el simbolo de ',' despues del segundo valor"); :}

    |Cir PAR_ABRE NUM:ancho COMA NUM:alto COMA error PAR_CIERRA PUNTOCOMA
                {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 7);
                   registrarError(sym, "Falta ingresar el color despues de la coma y antes del )"); :}

    |Cir PAR_ABRE NUM:ancho COMA NUM:alto COMA C:color error PUNTOCOMA
                {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 8);
                   registrarError(sym, "Falta ingresar ')' despues de color"); :}

    |Cir PAR_ABRE NUM:ancho COMA NUM:alto COMA C:color PAR_CIERRA error
                {: errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 9);
                   registrarError(sym, "Falta ingresar ';' al final de la instruccion "); :}

    // Círculo con nombre
    | ID:nombretoken IGUAL Cir PAR_ABRE NUM:radio COMA C:color PAR_CIERRA PUNTOCOMA
    {:
        ComandoGlobal.comandos.add("fig_nombrada," + nombretoken + ",cir," +
            ComandoGlobal.ultimaPosicionX + "," +
            ComandoGlobal.ultimaPosicionY + "," +
            radio + "," + color);  // CAMBIO: radio en lugar de radioVal
    :}

    // Línea sin nombre
    | Ln PAR_ABRE NUM:x2 COMA NUM:y2 COMA C:color PAR_CIERRA PUNTOCOMA
    {:
        ComandoGlobal.comandos.add("ln," +
            ComandoGlobal.ultimaPosicionX + "," +
            ComandoGlobal.ultimaPosicionY + "," +
            x2 + "," + y2 + "," + color);
    :}

    // Línea con nombre
    | ID:nombretoken IGUAL Ln PAR_ABRE NUM:x2 COMA NUM:y2 COMA C:color PAR_CIERRA PUNTOCOMA
    {:
        ComandoGlobal.comandos.add("fig_nombrada," + nombretoken + ",ln," +
            ComandoGlobal.ultimaPosicionX + "," +
            ComandoGlobal.ultimaPosicionY + "," +
            x2 + "," + y2 + "," + color);
    :};

