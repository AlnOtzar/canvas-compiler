
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package unam.aragon.mx;

import java_cup.runtime.Symbol;
import java.util.LinkedList;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\004\004\000\002\004\006\000" +
    "\002\004\006\000\002\004\006\000\002\004\006\000\002" +
    "\004\006\000\002\004\004\000\002\004\005\000\002\004" +
    "\003\000\002\006\003\000\002\006\004\000\002\017\002" +
    "\000\002\005\013\000\002\020\002\000\002\005\013\000" +
    "\002\021\002\000\002\005\013\000\002\022\002\000\002" +
    "\005\013\000\002\023\002\000\002\005\013\000\002\024" +
    "\002\000\002\005\011\000\002\025\002\000\002\005\013" +
    "\000\002\026\002\000\002\005\013\000\002\027\002\000" +
    "\002\005\013\000\002\030\002\000\002\005\005\000\002" +
    "\031\002\000\002\005\006\000\002\032\002\000\002\005" +
    "\007\000\002\033\002\000\002\005\010\000\002\034\002" +
    "\000\002\005\011\000\002\035\002\000\002\005\012\000" +
    "\002\036\002\000\002\005\010\000\002\037\002\000\002" +
    "\005\013\000\002\040\002\000\002\005\010\000\002\041" +
    "\002\000\002\005\012\000\002\042\002\000\002\005\012" +
    "\000\002\016\006\000\002\016\003\000\002\016\006\000" +
    "\002\016\006\000\002\016\006\000\002\016\006\000\002" +
    "\016\005\000\002\016\003\000\002\016\004\000\002\016" +
    "\005\000\002\007\003\000\002\007\004\000\002\010\013" +
    "\000\002\010\013\000\002\010\013\000\002\010\013\000" +
    "\002\010\013\000\002\010\013\000\002\010\013\000\002" +
    "\010\013\000\002\010\013\000\002\010\013\000\002\010" +
    "\015\000\002\010\011\000\002\010\013\000\002\010\013" +
    "\000\002\010\013\000\002\010\013\000\002\010\013\000" +
    "\002\010\013\000\002\010\013\000\002\010\013\000\002" +
    "\010\013\000\002\010\013\000\002\010\015" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\012\003\011\007\010\010\014\011\005\001" +
    "\002\000\004\002\u0104\001\002\000\010\003\275\015\276" +
    "\023\uffdd\001\002\000\014\002\000\003\011\007\010\010" +
    "\014\011\005\001\002\000\014\002\uffff\003\uffff\007\uffff" +
    "\010\uffff\011\uffff\001\002\000\006\003\272\017\273\001" +
    "\002\000\006\015\026\017\027\001\002\000\014\002\ufff2" +
    "\003\ufff2\007\ufff2\010\ufff2\011\ufff2\001\002\000\014\002" +
    "\ufffb\003\ufffb\007\ufffb\010\ufffb\011\ufffb\001\002\000\006" +
    "\003\015\015\016\001\002\000\016\002\ufff4\003\ufff4\004" +
    "\024\007\ufff4\010\ufff4\011\ufff4\001\002\000\006\003\017" +
    "\004\020\001\002\000\016\002\ufff3\003\ufff3\007\ufff3\010" +
    "\ufff3\011\ufff3\017\023\001\002\000\006\003\021\017\022" +
    "\001\002\000\014\002\ufff5\003\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\001\002\000\014\002\ufff9\003\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\001\002\000\014\002\ufff6\003\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\001\002\000\004\017\025\001\002\000\014" +
    "\002\ufff7\003\ufff7\007\ufff7\010\ufff7\011\ufff7\001\002\000" +
    "\006\004\031\020\030\001\002\000\014\002\ufffc\003\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\001\002\000\004\006\033\001" +
    "\002\000\004\017\032\001\002\000\014\002\ufff8\003\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\001\002\000\004\016\034\001" +
    "\002\000\004\006\035\001\002\000\004\021\036\001\002" +
    "\000\006\003\uffed\023\uffed\001\002\000\006\003\040\023" +
    "\041\001\002\000\024\002\uffc6\003\266\005\043\007\uffc6" +
    "\010\uffc6\011\uffc6\012\047\013\050\014\045\001\002\000" +
    "\024\002\uffc0\003\044\005\043\007\uffc0\010\uffc0\011\uffc0" +
    "\012\047\013\050\014\045\001\002\000\014\002\uffec\003" +
    "\uffec\007\uffec\010\uffec\011\uffec\001\002\000\004\015\234" +
    "\001\002\000\006\020\055\022\232\001\002\000\006\003" +
    "\155\020\154\001\002\000\026\002\uffbd\003\uffbd\005\uffbd" +
    "\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\022" +
    "\uffbd\001\002\000\006\003\101\020\100\001\002\000\004" +
    "\020\070\001\002\000\026\002\uffbf\003\053\005\043\007" +
    "\uffbf\010\uffbf\011\uffbf\012\047\013\050\014\045\022\052" +
    "\001\002\000\016\002\uffbe\003\066\007\uffbe\010\uffbe\011" +
    "\uffbe\017\067\001\002\000\020\002\uffc1\003\uffc1\007\uffc1" +
    "\010\uffc1\011\uffc1\017\056\020\055\001\002\000\026\002" +
    "\uffbc\003\uffbc\005\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc" +
    "\013\uffbc\014\uffbc\022\uffbc\001\002\000\004\006\057\001" +
    "\002\000\014\002\uffc3\003\uffc3\007\uffc3\010\uffc3\011\uffc3" +
    "\001\002\000\004\016\060\001\002\000\004\006\061\001" +
    "\002\000\004\016\062\001\002\000\004\004\063\001\002" +
    "\000\004\021\064\001\002\000\004\017\065\001\002\000" +
    "\026\002\uffba\003\uffba\005\uffba\007\uffba\010\uffba\011\uffba" +
    "\012\uffba\013\uffba\014\uffba\022\uffba\001\002\000\014\002" +
    "\uffc2\003\uffc2\007\uffc2\010\uffc2\011\uffc2\001\002\000\014" +
    "\002\uffc7\003\uffc7\007\uffc7\010\uffc7\011\uffc7\001\002\000" +
    "\004\006\071\001\002\000\004\016\072\001\002\000\004" +
    "\006\073\001\002\000\004\016\074\001\002\000\004\004" +
    "\075\001\002\000\004\021\076\001\002\000\004\017\077" +
    "\001\002\000\026\002\uffa6\003\uffa6\005\uffa6\007\uffa6\010" +
    "\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\022\uffa6\001\002" +
    "\000\006\003\112\006\111\001\002\000\004\006\102\001" +
    "\002\000\004\016\103\001\002\000\004\006\104\001\002" +
    "\000\004\016\105\001\002\000\004\004\106\001\002\000" +
    "\004\021\107\001\002\000\004\017\110\001\002\000\026" +
    "\002\uffb9\003\uffb9\005\uffb9\007\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\014\uffb9\022\uffb9\001\002\000\006\003\122" +
    "\016\121\001\002\000\004\016\113\001\002\000\004\006" +
    "\114\001\002\000\004\016\115\001\002\000\004\004\116" +
    "\001\002\000\004\021\117\001\002\000\004\017\120\001" +
    "\002\000\026\002\uffb8\003\uffb8\005\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\013\uffb8\014\uffb8\022\uffb8\001\002\000" +
    "\006\003\131\006\130\001\002\000\004\006\123\001\002" +
    "\000\004\016\124\001\002\000\004\004\125\001\002\000" +
    "\004\021\126\001\002\000\004\017\127\001\002\000\026" +
    "\002\uffb7\003\uffb7\005\uffb7\007\uffb7\010\uffb7\011\uffb7\012" +
    "\uffb7\013\uffb7\014\uffb7\022\uffb7\001\002\000\006\003\137" +
    "\016\136\001\002\000\004\016\132\001\002\000\004\004" +
    "\133\001\002\000\004\021\134\001\002\000\004\017\135" +
    "\001\002\000\026\002\uffb6\003\uffb6\005\uffb6\007\uffb6\010" +
    "\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\022\uffb6\001\002" +
    "\000\006\003\143\004\144\001\002\000\004\004\140\001" +
    "\002\000\004\021\141\001\002\000\004\017\142\001\002" +
    "\000\026\002\uffb5\003\uffb5\005\uffb5\007\uffb5\010\uffb5\011" +
    "\uffb5\012\uffb5\013\uffb5\014\uffb5\022\uffb5\001\002\000\004" +
    "\021\152\001\002\000\006\003\145\021\146\001\002\000" +
    "\004\017\151\001\002\000\006\003\147\017\150\001\002" +
    "\000\026\002\uffb2\003\uffb2\005\uffb2\007\uffb2\010\uffb2\011" +
    "\uffb2\012\uffb2\013\uffb2\014\uffb2\022\uffb2\001\002\000\026" +
    "\002\uffbb\003\uffbb\005\uffbb\007\uffbb\010\uffbb\011\uffbb\012" +
    "\uffbb\013\uffbb\014\uffbb\022\uffbb\001\002\000\026\002\uffb3" +
    "\003\uffb3\005\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013" +
    "\uffb3\014\uffb3\022\uffb3\001\002\000\004\017\153\001\002" +
    "\000\026\002\uffb4\003\uffb4\005\uffb4\007\uffb4\010\uffb4\011" +
    "\uffb4\012\uffb4\013\uffb4\014\uffb4\022\uffb4\001\002\000\006" +
    "\003\166\006\165\001\002\000\004\006\156\001\002\000" +
    "\004\016\157\001\002\000\004\006\160\001\002\000\004" +
    "\016\161\001\002\000\004\004\162\001\002\000\004\021" +
    "\163\001\002\000\004\017\164\001\002\000\026\002\uffaf" +
    "\003\uffaf\005\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013" +
    "\uffaf\014\uffaf\022\uffaf\001\002\000\006\003\176\016\175" +
    "\001\002\000\004\016\167\001\002\000\004\006\170\001" +
    "\002\000\004\016\171\001\002\000\004\004\172\001\002" +
    "\000\004\021\173\001\002\000\004\017\174\001\002\000" +
    "\026\002\uffae\003\uffae\005\uffae\007\uffae\010\uffae\011\uffae" +
    "\012\uffae\013\uffae\014\uffae\022\uffae\001\002\000\010\003" +
    "\205\004\206\006\204\001\002\000\004\006\177\001\002" +
    "\000\004\016\200\001\002\000\004\004\201\001\002\000" +
    "\004\021\202\001\002\000\004\017\203\001\002\000\026" +
    "\002\uffad\003\uffad\005\uffad\007\uffad\010\uffad\011\uffad\012" +
    "\uffad\013\uffad\014\uffad\022\uffad\001\002\000\006\003\216" +
    "\016\215\001\002\000\004\016\211\001\002\000\004\021" +
    "\207\001\002\000\004\017\210\001\002\000\026\002\uffb0" +
    "\003\uffb0\005\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013" +
    "\uffb0\014\uffb0\022\uffb0\001\002\000\004\004\212\001\002" +
    "\000\004\021\213\001\002\000\004\017\214\001\002\000" +
    "\026\002\uffac\003\uffac\005\uffac\007\uffac\010\uffac\011\uffac" +
    "\012\uffac\013\uffac\014\uffac\022\uffac\001\002\000\006\003" +
    "\222\004\223\001\002\000\004\004\217\001\002\000\004" +
    "\021\220\001\002\000\004\017\221\001\002\000\026\002" +
    "\uffab\003\uffab\005\uffab\007\uffab\010\uffab\011\uffab\012\uffab" +
    "\013\uffab\014\uffab\022\uffab\001\002\000\004\021\230\001" +
    "\002\000\006\003\224\021\225\001\002\000\004\017\227" +
    "\001\002\000\004\003\226\001\002\000\026\002\uffa8\003" +
    "\uffa8\005\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8" +
    "\014\uffa8\022\uffa8\001\002\000\026\002\uffa9\003\uffa9\005" +
    "\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9" +
    "\022\uffa9\001\002\000\004\017\231\001\002\000\026\002" +
    "\uffaa\003\uffaa\005\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa" +
    "\013\uffaa\014\uffaa\022\uffaa\001\002\000\004\017\233\001" +
    "\002\000\014\002\uffc4\003\uffc4\007\uffc4\010\uffc4\011\uffc4" +
    "\001\002\000\010\012\236\013\237\014\235\001\002\000" +
    "\004\020\260\001\002\000\004\020\250\001\002\000\004" +
    "\020\240\001\002\000\004\006\241\001\002\000\004\016" +
    "\242\001\002\000\004\006\243\001\002\000\004\016\244" +
    "\001\002\000\004\004\245\001\002\000\004\021\246\001" +
    "\002\000\004\017\247\001\002\000\026\002\uffa5\003\uffa5" +
    "\005\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014" +
    "\uffa5\022\uffa5\001\002\000\004\006\251\001\002\000\004" +
    "\016\252\001\002\000\004\006\253\001\002\000\004\016" +
    "\254\001\002\000\004\004\255\001\002\000\004\021\256" +
    "\001\002\000\004\017\257\001\002\000\026\002\uffb1\003" +
    "\uffb1\005\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1" +
    "\014\uffb1\022\uffb1\001\002\000\004\006\261\001\002\000" +
    "\004\016\262\001\002\000\004\004\263\001\002\000\004" +
    "\021\264\001\002\000\004\017\265\001\002\000\026\002" +
    "\uffa7\003\uffa7\005\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7" +
    "\013\uffa7\014\uffa7\022\uffa7\001\002\000\004\020\055\001" +
    "\002\000\016\003\266\005\043\012\047\013\050\014\045" +
    "\022\270\001\002\000\004\017\271\001\002\000\014\002" +
    "\uffc5\003\uffc5\007\uffc5\010\uffc5\011\uffc5\001\002\000\014" +
    "\002\ufffa\003\ufffa\007\ufffa\010\ufffa\011\ufffa\001\002\000" +
    "\014\002\ufffd\003\ufffd\007\ufffd\010\ufffd\011\ufffd\001\002" +
    "\000\014\002\ufffe\003\ufffe\007\ufffe\010\ufffe\011\ufffe\001" +
    "\002\000\004\020\375\001\002\000\010\003\303\020\302" +
    "\023\uffdb\001\002\000\006\003\040\023\041\001\002\000" +
    "\014\002\uffdc\003\uffdc\007\uffdc\010\uffdc\011\uffdc\001\002" +
    "\000\006\003\040\023\041\001\002\000\014\003\314\006" +
    "\312\016\313\021\315\023\uffd9\001\002\000\004\006\304" +
    "\001\002\000\004\016\305\001\002\000\004\006\306\001" +
    "\002\000\004\021\307\001\002\000\006\003\uffe9\023\uffe9" +
    "\001\002\000\006\003\040\023\041\001\002\000\014\002" +
    "\uffe8\003\uffe8\007\uffe8\010\uffe8\011\uffe8\001\002\000\010" +
    "\003\341\016\340\023\uffd7\001\002\000\004\006\334\001" +
    "\002\000\006\016\324\021\325\001\002\000\006\003\uffd1" +
    "\023\uffd1\001\002\000\006\003\040\023\041\001\002\000" +
    "\014\002\uffd8\003\uffd8\007\uffd8\010\uffd8\011\uffd8\001\002" +
    "\000\006\003\040\023\041\001\002\000\006\003\040\023" +
    "\041\001\002\000\014\002\uffd0\003\uffd0\007\uffd0\010\uffd0" +
    "\011\uffd0\001\002\000\014\002\uffcc\003\uffcc\007\uffcc\010" +
    "\uffcc\011\uffcc\001\002\000\004\006\330\001\002\000\006" +
    "\003\uffe5\023\uffe5\001\002\000\006\003\040\023\041\001" +
    "\002\000\014\002\uffe4\003\uffe4\007\uffe4\010\uffe4\011\uffe4" +
    "\001\002\000\004\021\331\001\002\000\006\003\uffe7\023" +
    "\uffe7\001\002\000\006\003\040\023\041\001\002\000\014" +
    "\002\uffe6\003\uffe6\007\uffe6\010\uffe6\011\uffe6\001\002\000" +
    "\004\021\335\001\002\000\006\003\uffc9\023\uffc9\001\002" +
    "\000\006\003\040\023\041\001\002\000\014\002\uffc8\003" +
    "\uffc8\007\uffc8\010\uffc8\011\uffc8\001\002\000\012\003\351" +
    "\006\350\021\352\023\uffd5\001\002\000\004\006\344\001" +
    "\002\000\006\003\040\023\041\001\002\000\014\002\uffd6" +
    "\003\uffd6\007\uffd6\010\uffd6\011\uffd6\001\002\000\004\021" +
    "\345\001\002\000\006\003\uffe3\023\uffe3\001\002\000\006" +
    "\003\040\023\041\001\002\000\014\002\uffe2\003\uffe2\007" +
    "\uffe2\010\uffe2\011\uffe2\001\002\000\010\003\362\021\363" +
    "\023\uffd3\001\002\000\004\021\357\001\002\000\006\003" +
    "\uffcb\023\uffcb\001\002\000\006\003\040\023\041\001\002" +
    "\000\014\002\uffd4\003\uffd4\007\uffd4\010\uffd4\011\uffd4\001" +
    "\002\000\006\003\040\023\041\001\002\000\014\002\uffca" +
    "\003\uffca\007\uffca\010\uffca\011\uffca\001\002\000\006\003" +
    "\uffe1\023\uffe1\001\002\000\006\003\040\023\041\001\002" +
    "\000\014\002\uffe0\003\uffe0\007\uffe0\010\uffe0\011\uffe0\001" +
    "\002\000\006\003\uffdf\023\uffdf\001\002\000\006\003\uffef" +
    "\023\uffef\001\002\000\006\003\040\023\041\001\002\000" +
    "\014\002\uffd2\003\uffd2\007\uffd2\010\uffd2\011\uffd2\001\002" +
    "\000\006\003\040\023\041\001\002\000\006\003\040\023" +
    "\041\001\002\000\014\002\uffce\003\uffce\007\uffce\010\uffce" +
    "\011\uffce\001\002\000\014\002\uffee\003\uffee\007\uffee\010" +
    "\uffee\011\uffee\001\002\000\006\003\040\023\041\001\002" +
    "\000\014\002\uffde\003\uffde\007\uffde\010\uffde\011\uffde\001" +
    "\002\000\014\002\uffda\003\uffda\007\uffda\010\uffda\011\uffda" +
    "\001\002\000\004\006\376\001\002\000\004\016\377\001" +
    "\002\000\004\006\u0100\001\002\000\004\021\u0101\001\002" +
    "\000\006\003\uffeb\023\uffeb\001\002\000\006\003\040\023" +
    "\041\001\002\000\014\002\uffea\003\uffea\007\uffea\010\uffea" +
    "\011\uffea\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0102\000\014\002\003\003\005\004\006\005\011\012" +
    "\012\001\001\000\002\001\001\000\004\030\276\001\001" +
    "\000\010\004\273\005\011\012\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\036\001\001\000\004\016\041\001\001\000\006\007" +
    "\266\010\045\001\001\000\006\007\050\010\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\300\001\001\000\004\016" +
    "\277\001\001\000\002\001\001\000\004\016\373\001\001" +
    "\000\004\032\315\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\307" +
    "\001\001\000\004\016\310\001\001\000\002\001\001\000" +
    "\004\033\341\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\036\320\040\317\001\001\000\004\016\316\001" +
    "\001\000\002\001\001\000\004\016\322\001\001\000\004" +
    "\016\321\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\325\001\001\000\004\016\326" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\331\001\001\000\004\016\332\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\335\001\001\000\004\016" +
    "\336\001\001\000\002\001\001\000\004\034\352\001\001" +
    "\000\002\001\001\000\004\016\342\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\345\001\001\000\004" +
    "\016\346\001\001\000\002\001\001\000\004\035\363\001" +
    "\001\000\002\001\001\000\004\041\354\001\001\000\004" +
    "\016\353\001\001\000\002\001\001\000\004\016\355\001" +
    "\001\000\002\001\001\000\004\026\357\001\001\000\004" +
    "\016\360\001\001\000\002\001\001\000\004\027\371\001" +
    "\001\000\006\017\365\037\366\001\001\000\004\016\364" +
    "\001\001\000\002\001\001\000\004\016\370\001\001\000" +
    "\004\016\367\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\372\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u0101\001\001\000\004\016" +
    "\u0102\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado = "";
    public static LinkedList<TError> TablaES = new LinkedList<TError>();
    public static LinkedList<String> comandos = new LinkedList<>();

    // Variables para almacenar la última posición X y Y,
    // que se usan como punto de origen para las figuras dentro de un
    // bloque 'posicion'
    Integer NUM;
    String C, ID;
    private int currentPosX = 0;
    private int currentPosY = 0;

    private boolean errorRecuperado = false;

    private String mensajeErrorPersonalizado = null;

    public void syntax_error(Symbol s) {
        if (errorRecuperado) {
            errorRecuperado = false;
            return;
        }
        if (s == null) return;
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        if (s == null || s.value == null) return;

        String lexema = s.value.toString();
        int fila = (s.left >= 0) ? s.left + 1 : -1;
        int columna = (s.right >= 0) ? s.right + 1 : -1;

        TablaES.add(new TError(lexema, fila, columna, "Error Sintáctico", "Caracter no esperado (no recuperable)"));
                        ComandoGlobal.compiladoCorrectamente = false;
    }

    public void registrarError(Symbol sym, String descripcion) {
        int fila = (sym != null && sym.left >= 0) ? sym.left + 1 : -1;
        int columna = (sym != null && sym.right >= 0) ? sym.right + 1 : -1;
        String lexema = (sym != null && sym.value != null) ? sym.value.toString() : "EOF";
        TablaES.add(new TError(lexema, fila, columna, "Error Sintáctico", descripcion));
                                ComandoGlobal.compiladoCorrectamente = false;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= Lpr PUNTOCOMA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                                 Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2 + 1);
                                 ComandoGlobal.comandos.add("lpr");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= error PUNTOCOMA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2 + 1);
                           registrarError(sym, "Falta el identificador de instrucción (limpiar)");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= animacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= Lpr error 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                               Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2 + 2);
                               registrarError(sym, "Falta el identificador de instrucción (;)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= F IGUAL C PUNTOCOMA 
            {
              Object RESULT =null;
		
            String colorTexto = (String)((Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            ComandoGlobal.comandos.add("f," + colorTexto);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= error IGUAL C PUNTOCOMA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 1);
                   registrarError(sym, "Falta el identificador de instrucción (limpiar)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= F error C PUNTOCOMA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                       Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 2);
                       registrarError(sym, "Falta el identificador de instrucción (=)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= F IGUAL error PUNTOCOMA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                       Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 3);
                       registrarError(sym, "Falta el identificador de instrucción (color)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= F IGUAL C error 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                       Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 4);
                       registrarError(sym, "Falta el identificador de instrucción (;)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= F error 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 2);
                           registrarError(sym, "Faltan los identificadores de instrucciónes ( =, color , ; )"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= F IGUAL error 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 3);
                           registrarError(sym, "Faltan los identificadores de instrucciónes ( color , ; )"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= encabezado 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // encabezados ::= encabezado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezados",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // encabezados ::= encabezados encabezado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezados",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$0 ::= 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

          ComandoGlobal.ultimaPosicionX = x.intValue();
          ComandoGlobal.ultimaPosicionY = y.intValue();
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // encabezado ::= Ps IGUAL PAR_ABRE NUM COMA NUM PAR_CIERRA NT$0 bloque_figuras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$1 ::= 
            {
              Object RESULT =null;
 errorRecuperado = true;
               Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7 + 1);
               registrarError(sym, "Falta posicion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // encabezado ::= error IGUAL PAR_ABRE NUM COMA NUM PAR_CIERRA NT$1 bloque_figuras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$2 ::= 
            {
              Object RESULT =null;
 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7 + 2);
           registrarError(sym, "Falta un '='"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // encabezado ::= Ps error PAR_ABRE NUM COMA NUM PAR_CIERRA NT$2 bloque_figuras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$3 ::= 
            {
              Object RESULT =null;
 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7 + 3);
           registrarError(sym, "Falta un '('"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // encabezado ::= Ps IGUAL error NUM COMA NUM PAR_CIERRA NT$3 bloque_figuras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$4 ::= 
            {
              Object RESULT =null;
 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7 + 4);
           registrarError(sym, "Falta el primer número entre los parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // encabezado ::= Ps IGUAL PAR_ABRE error COMA NUM PAR_CIERRA NT$4 bloque_figuras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$5 ::= 
            {
              Object RESULT =null;
 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5 +4);
           registrarError(sym, "Faltan los parámetros correctamente escritos"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // encabezado ::= Ps IGUAL PAR_ABRE error PAR_CIERRA NT$5 bloque_figuras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$6 ::= 
            {
              Object RESULT =null;
 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7 + 5);
           registrarError(sym, "Falta una coma ',' entre los parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // encabezado ::= Ps IGUAL PAR_ABRE NUM error NUM PAR_CIERRA NT$6 bloque_figuras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$7 ::= 
            {
              Object RESULT =null;
 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7 + 6);
           registrarError(sym, "Falta el segundo número entre los parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // encabezado ::= Ps IGUAL PAR_ABRE NUM COMA error PAR_CIERRA NT$7 bloque_figuras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$8 ::= 
            {
              Object RESULT =null;
 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7 + 7);
           registrarError(sym, "Falta un ')'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // encabezado ::= Ps IGUAL PAR_ABRE NUM COMA NUM error NT$8 bloque_figuras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$9 ::= 
            {
              Object RESULT =null;
 errorRecuperado = true;
               Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
               registrarError(sym, "Comando incompleto, falta '=(x,y){figura}'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // encabezado ::= Ps NT$9 bloque_figuras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$10 ::= 
            {
              Object RESULT =null;
 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "Comando incompleto, falta '(x,y){figura}'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // encabezado ::= Ps IGUAL NT$10 bloque_figuras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$11 ::= 
            {
              Object RESULT =null;
 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "Comando incompleto, falta 'x,y){figura}'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // encabezado ::= Ps IGUAL PAR_ABRE NT$11 bloque_figuras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$12 ::= 
            {
              Object RESULT =null;
 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "Comando incompleto, falta ',y){figura}'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // encabezado ::= Ps IGUAL PAR_ABRE NUM NT$12 bloque_figuras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$13 ::= 
            {
              Object RESULT =null;
 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "Comando incompleto, falta 'y){figura}'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // encabezado ::= Ps IGUAL PAR_ABRE NUM COMA NT$13 bloque_figuras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$14 ::= 
            {
              Object RESULT =null;
 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "Comando incompleto, falta '){figura}'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // encabezado ::= Ps IGUAL PAR_ABRE NUM COMA NUM NT$14 bloque_figuras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$15 ::= 
            {
              Object RESULT =null;
 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "Faltan coordenadas entre los paréntesis"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // encabezado ::= Ps IGUAL PAR_ABRE PAR_CIERRA NT$15 bloque_figuras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$16 ::= 
            {
              Object RESULT =null;
 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "Comando incompleto, falta '{figura}'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // encabezado ::= Ps IGUAL PAR_ABRE NUM COMA NUM PAR_CIERRA NT$16 bloque_figuras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$17 ::= 
            {
              Object RESULT =null;
 errorRecuperado = true;
               Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
               registrarError(sym, "Faltan parametros}'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // encabezado ::= Ps IGUAL PAR_ABRE PAR_CIERRA NT$17 bloque_figuras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$18 ::= 
            {
              Object RESULT =null;
 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "falta un parameto y ,"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // encabezado ::= Ps IGUAL PAR_ABRE NUM COMA PAR_CIERRA NT$18 bloque_figuras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$19 ::= 
            {
              Object RESULT =null;
 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
           registrarError(sym, "falta un parameto y ,"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // encabezado ::= Ps IGUAL PAR_ABRE COMA NUM PAR_CIERRA NT$19 bloque_figuras 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bloque_figuras ::= LLAVE_ABRE figuras LLAVE_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_figuras",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bloque_figuras ::= error 
            {
              Object RESULT =null;
		
                    errorRecuperado = true;
                    registrarError((Symbol) CUP$parser$stack.peek(), "Falta ingresar {'");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_figuras",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bloque_figuras ::= error figuras LLAVE_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		
                errorRecuperado = true;
                registrarError((Symbol) CUP$parser$stack.peek(), "Falta ingresar {'");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_figuras",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bloque_figuras ::= LLAVE_ABRE error LLAVE_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		
                errorRecuperado = true;
                registrarError((Symbol) CUP$parser$stack.peek(), "Falta ingresar una o varias figuras'");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_figuras",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bloque_figuras ::= LLAVE_ABRE figuras error PUNTOCOMA 
            {
              Object RESULT =null;
		
                    errorRecuperado = true;
                    registrarError((Symbol) CUP$parser$stack.peek(), "Falta ingresar }'");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_figuras",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bloque_figuras ::= LLAVE_ABRE figuras LLAVE_CIERRA error 
            {
              Object RESULT =null;
		
            errorRecuperado = true;
            registrarError((Symbol) CUP$parser$stack.peek(), "Falta punto y coma ';'");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_figuras",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bloque_figuras ::= LLAVE_ABRE figuras error 
            {
              Object RESULT =null;
		
            errorRecuperado = true;
            registrarError((Symbol) CUP$parser$stack.peek(), "Faltan '}' y ';'");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_figuras",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bloque_figuras ::= LLAVE_ABRE 
            {
              Object RESULT =null;
		 errorRecuperado = true;
               Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
               registrarError(sym, "Comando incompleto, falta 'figura};'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_figuras",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bloque_figuras ::= LLAVE_ABRE figuras 
            {
              Object RESULT =null;
		 errorRecuperado = true;
               Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
               registrarError(sym, "Comando incompleto, falta '};'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_figuras",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // bloque_figuras ::= LLAVE_ABRE figuras LLAVE_CIERRA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
               Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top);
               registrarError(sym, "Comando incompleto, falta ;"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_figuras",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // figuras ::= figura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("figuras",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // figuras ::= figuras figura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("figuras",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // figura ::= Rec PAR_ABRE NUM COMA NUM COMA C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer alto = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        ComandoGlobal.comandos.add("rec," +
            ComandoGlobal.ultimaPosicionX + "," +
            ComandoGlobal.ultimaPosicionY + "," +
            ancho + "," + alto + "," + color);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // figura ::= error PAR_ABRE NUM COMA NUM COMA C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer alto = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 errorRecuperado = true;
               Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 1);
               registrarError(sym, "Falta ingresar una figura valida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // figura ::= Rec error NUM COMA NUM COMA C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer alto = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 2);
                   registrarError(sym, "Falta el simbolo de '('"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // figura ::= Rec PAR_ABRE error COMA NUM COMA C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int altoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer alto = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 3);
                   registrarError(sym, "Falta el valor 'ancho'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // figura ::= Rec PAR_ABRE NUM error NUM COMA C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer alto = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 4);
                   registrarError(sym, "Falta el simbolo de ',' entre ancho y alto"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // figura ::= Rec PAR_ABRE NUM COMA error COMA C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 5);
                   registrarError(sym, "Falta el valor alto"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // figura ::= Rec PAR_ABRE NUM COMA NUM error C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer alto = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 6);
                   registrarError(sym, "Falta el simbolo de ',' despues del segundo valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // figura ::= Rec PAR_ABRE NUM COMA NUM COMA error PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer alto = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 7);
                   registrarError(sym, "Falta ingresar el color despues de la coma y antes del )"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // figura ::= Rec PAR_ABRE NUM COMA NUM COMA C error PUNTOCOMA 
            {
              Object RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer alto = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 8);
                   registrarError(sym, "Falta ingresar ')' despues de color"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // figura ::= Rec PAR_ABRE NUM COMA NUM COMA C PAR_CIERRA error 
            {
              Object RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer alto = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 9);
                   registrarError(sym, "Falta ingresar ';' al final de la instruccion "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // figura ::= ID IGUAL Rec PAR_ABRE NUM COMA NUM COMA C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int nombretokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int nombretokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String nombretoken = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer alto = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        ComandoGlobal.comandos.add("fig_nombrada," + nombretoken + ",rec," +
            ComandoGlobal.ultimaPosicionX + "," +
            ComandoGlobal.ultimaPosicionY + "," +
            ancho + "," + alto + "," + color);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // figura ::= Cir PAR_ABRE NUM COMA C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int radioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int radioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer radio = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        ComandoGlobal.comandos.add("cir," +
            ComandoGlobal.ultimaPosicionX + "," +
            ComandoGlobal.ultimaPosicionY + "," +
            radio + "," + color);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // figura ::= Cir error NUM COMA NUM COMA C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer alto = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 2);
                   registrarError(sym, "Falta el simbolo de '('"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // figura ::= Cir PAR_ABRE error COMA NUM COMA C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int altoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer alto = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 3);
                   registrarError(sym, "Falta el valor 'ancho'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // figura ::= Cir PAR_ABRE NUM error NUM COMA C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer alto = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 4);
                   registrarError(sym, "Falta el simbolo de ',' entre ancho y alto"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // figura ::= Cir PAR_ABRE NUM COMA error COMA C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 5);
                   registrarError(sym, "Falta el valor alto"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // figura ::= Cir PAR_ABRE NUM COMA NUM error C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer alto = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 6);
                   registrarError(sym, "Falta el simbolo de ',' despues del segundo valor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // figura ::= Cir PAR_ABRE NUM COMA NUM COMA error PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer alto = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 7);
                   registrarError(sym, "Falta ingresar el color despues de la coma y antes del )"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // figura ::= Cir PAR_ABRE NUM COMA NUM COMA C error PUNTOCOMA 
            {
              Object RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer alto = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 8);
                   registrarError(sym, "Falta ingresar ')' despues de color"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // figura ::= Cir PAR_ABRE NUM COMA NUM COMA C PAR_CIERRA error 
            {
              Object RESULT =null;
		int ancholeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int anchoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer ancho = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int altoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int altoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer alto = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 9 + 9);
                   registrarError(sym, "Falta ingresar ';' al final de la instruccion "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // figura ::= ID IGUAL Cir PAR_ABRE NUM COMA C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int nombretokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nombretokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String nombretoken = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int radioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int radioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer radio = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        ComandoGlobal.comandos.add("fig_nombrada," + nombretoken + ",cir," +
            ComandoGlobal.ultimaPosicionX + "," +
            ComandoGlobal.ultimaPosicionY + "," +
            radio + "," + color);  // CAMBIO: radio en lugar de radioVal
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // figura ::= Ln PAR_ABRE NUM COMA NUM COMA C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int x2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer x2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int y2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int y2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer y2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        ComandoGlobal.comandos.add("ln," +
            ComandoGlobal.ultimaPosicionX + "," +
            ComandoGlobal.ultimaPosicionY + "," +
            x2 + "," + y2 + "," + color);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // figura ::= ID IGUAL Ln PAR_ABRE NUM COMA NUM COMA C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int nombretokenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int nombretokenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String nombretoken = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Integer x2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int y2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int y2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer y2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        ComandoGlobal.comandos.add("fig_nombrada," + nombretoken + ",ln," +
            ComandoGlobal.ultimaPosicionX + "," +
            ComandoGlobal.ultimaPosicionY + "," +
            x2 + "," + y2 + "," + color);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
