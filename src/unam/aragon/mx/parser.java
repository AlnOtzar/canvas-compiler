
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package unam.aragon.mx;

import java_cup.runtime.Symbol;
import java.util.LinkedList;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\006\000\002\004\006\000" +
    "\002\004\006\000\002\004\006\000\002\004\006\000\002" +
    "\004\004\000\002\004\005\000\002\004\007\000\002\006" +
    "\003\000\002\006\004\000\002\005\011\000\002\005\011" +
    "\000\002\005\011\000\002\005\011\000\002\005\011\000" +
    "\002\005\011\000\002\005\011\000\002\005\011\000\002" +
    "\005\011\000\002\005\003\000\002\005\004\000\002\005" +
    "\005\000\002\005\006\000\002\005\007\000\002\005\010" +
    "\000\002\005\011\000\002\007\003\000\002\007\004\000" +
    "\002\010\014\000\002\010\012\000\002\010\014\000\002" +
    "\010\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\012\003\010\005\007\006\011\007\004\001" +
    "\002\000\006\003\034\013\035\001\002\000\014\002\000" +
    "\003\010\005\007\006\011\007\004\001\002\000\004\002" +
    "\032\001\002\000\006\003\030\015\031\001\002\000\006" +
    "\013\024\015\025\001\002\000\006\003\013\013\014\001" +
    "\002\000\014\002\uffff\003\uffff\005\uffff\006\uffff\007\uffff" +
    "\001\002\000\016\002\ufff5\003\ufff5\004\022\005\ufff5\006" +
    "\ufff5\007\ufff5\001\002\000\006\003\015\004\016\001\002" +
    "\000\016\002\ufff4\003\ufff4\005\ufff4\006\ufff4\007\ufff4\015" +
    "\021\001\002\000\006\003\017\015\020\001\002\000\014" +
    "\002\ufff6\003\ufff6\005\ufff6\006\ufff6\007\ufff6\001\002\000" +
    "\014\002\ufffa\003\ufffa\005\ufffa\006\ufffa\007\ufffa\001\002" +
    "\000\014\002\ufff7\003\ufff7\005\ufff7\006\ufff7\007\ufff7\001" +
    "\002\000\004\015\023\001\002\000\014\002\ufff8\003\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\001\002\000\004\004\026\001" +
    "\002\000\014\002\ufffc\003\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\001\002\000\004\015\027\001\002\000\014\002\ufff9\003" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\001\002\000\014\002\ufffb" +
    "\003\ufffb\005\ufffb\006\ufffb\007\ufffb\001\002\000\014\002" +
    "\ufffd\003\ufffd\005\ufffd\006\ufffd\007\ufffd\001\002\000\004" +
    "\002\001\001\002\000\014\002\ufffe\003\ufffe\005\ufffe\006" +
    "\ufffe\007\ufffe\001\002\000\004\016\135\001\002\000\016" +
    "\003\103\005\uffe7\010\uffe7\011\uffe7\012\uffe7\016\102\001" +
    "\002\000\012\005\040\010\042\011\044\012\037\001\002" +
    "\000\004\013\073\001\002\000\004\015\072\001\002\000" +
    "\014\005\uffe0\010\uffe0\011\uffe0\012\uffe0\020\uffe0\001\002" +
    "\000\004\013\061\001\002\000\014\005\040\010\042\011" +
    "\044\012\037\020\056\001\002\000\004\013\045\001\002" +
    "\000\004\016\046\001\002\000\004\022\047\001\002\000" +
    "\004\014\050\001\002\000\004\022\051\001\002\000\004" +
    "\014\052\001\002\000\004\004\053\001\002\000\004\017" +
    "\054\001\002\000\004\015\055\001\002\000\014\005\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\020\uffdc\001\002\000\004\015" +
    "\060\001\002\000\014\005\uffdf\010\uffdf\011\uffdf\012\uffdf" +
    "\020\uffdf\001\002\000\014\002\ufff3\003\ufff3\005\ufff3\006" +
    "\ufff3\007\ufff3\001\002\000\004\016\062\001\002\000\004" +
    "\022\063\001\002\000\004\014\064\001\002\000\004\022" +
    "\065\001\002\000\004\014\066\001\002\000\004\004\067" +
    "\001\002\000\004\017\070\001\002\000\004\015\071\001" +
    "\002\000\014\005\uffde\010\uffde\011\uffde\012\uffde\020\uffde" +
    "\001\002\000\014\005\uffdb\010\uffdb\011\uffdb\012\uffdb\020" +
    "\uffdb\001\002\000\004\016\074\001\002\000\004\022\075" +
    "\001\002\000\004\014\076\001\002\000\004\004\077\001" +
    "\002\000\004\017\100\001\002\000\004\015\101\001\002" +
    "\000\014\005\uffdd\010\uffdd\011\uffdd\012\uffdd\020\uffdd\001" +
    "\002\000\016\003\112\005\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\022\111\001\002\000\004\022\104\001\002\000\004\014" +
    "\105\001\002\000\004\022\106\001\002\000\004\017\107" +
    "\001\002\000\004\021\110\001\002\000\012\005\uffed\010" +
    "\uffed\011\uffed\012\uffed\001\002\000\016\003\120\005\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\014\117\001\002\000\004\014" +
    "\113\001\002\000\004\022\114\001\002\000\004\017\115" +
    "\001\002\000\004\021\116\001\002\000\012\005\uffec\010" +
    "\uffec\011\uffec\012\uffec\001\002\000\016\003\125\005\uffe4" +
    "\010\uffe4\011\uffe4\012\uffe4\022\124\001\002\000\004\022" +
    "\121\001\002\000\004\017\122\001\002\000\004\021\123" +
    "\001\002\000\012\005\uffeb\010\uffeb\011\uffeb\012\uffeb\001" +
    "\002\000\016\003\130\005\uffe3\010\uffe3\011\uffe3\012\uffe3" +
    "\017\131\001\002\000\004\017\126\001\002\000\004\021" +
    "\127\001\002\000\012\005\uffea\010\uffea\011\uffea\012\uffea" +
    "\001\002\000\004\021\134\001\002\000\016\003\132\005" +
    "\uffe2\010\uffe2\011\uffe2\012\uffe2\021\133\001\002\000\012" +
    "\005\uffe8\010\uffe8\011\uffe8\012\uffe8\001\002\000\012\005" +
    "\ufff0\010\ufff0\011\ufff0\012\ufff0\001\002\000\012\005\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\001\002\000\004\022\136\001" +
    "\002\000\004\014\137\001\002\000\004\022\140\001\002" +
    "\000\004\017\141\001\002\000\004\021\142\001\002\000" +
    "\012\005\uffee\010\uffee\011\uffee\012\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\010\002\005\003\004\004\011\001\001\000" +
    "\004\005\035\001\001\000\004\004\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\042\010\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado = "";
    public static LinkedList<TError> TablaES = new LinkedList<TError>();
    public static LinkedList<String> comandos = new LinkedList<>();

    private boolean errorRecuperado = false;

    private String mensajeErrorPersonalizado = null;

    public void syntax_error(Symbol s) {
        if (errorRecuperado) {
            errorRecuperado = false;
            return;
        }

        if (s == null) return;


    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        if (s == null || s.value == null) return;

        String lexema = s.value.toString();
        int fila = (s.left >= 0) ? s.left + 1 : -1;
        int columna = (s.right >= 0) ? s.right + 1 : -1;

        TablaES.add(new TError(lexema, fila, columna, "Error Sintáctico", "Caracter no esperado (no recuperable)"));
    }

    public void registrarError(Symbol sym, String descripcion) {
        int fila = (sym != null && sym.left >= 0) ? sym.left + 1 : -1;
        int columna = (sym != null && sym.right >= 0) ? sym.right + 1 : -1;
        String lexema = (sym != null && sym.value != null) ? sym.value.toString() : "EOF";
        TablaES.add(new TError(lexema, fila, columna, "Error Sintáctico", descripcion));
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= Lpr PUNTOCOMA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                                 Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2 + 1);
                                 ComandoGlobal.comandos.add("lpr");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= error PUNTOCOMA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2 + 1);
                           registrarError(sym, "Falta el identificador de instrucción (limpiar)");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= Lpr error 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                               Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2 + 2);
                               registrarError(sym, "Falta el identificador de instrucción (;)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= F IGUAL C PUNTOCOMA 
            {
              Object RESULT =null;
		
            String colorTexto = (String)((Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            ComandoGlobal.comandos.add("f," + colorTexto);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= error IGUAL C PUNTOCOMA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 1);
                   registrarError(sym, "Falta el identificador de instrucción (limpiar)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= F error C PUNTOCOMA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                       Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 2);
                       registrarError(sym, "Falta el identificador de instrucción (=)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= F IGUAL error PUNTOCOMA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                       Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 3);
                       registrarError(sym, "Falta el identificador de instrucción (color)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= F IGUAL C error 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                       Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 4);
                       registrarError(sym, "Falta el identificador de instrucción (;)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= F error 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 2);
                           registrarError(sym, "Faltan los identificadores de instrucciónes ( =, color , ; )"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= F IGUAL error 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 3);
                           registrarError(sym, "Faltan los identificadores de instrucciónes ( color , ; )"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= Ps encabezado figuras LLAVE_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // encabezados ::= encabezado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezados",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // encabezados ::= encabezados encabezado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezados",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // encabezado ::= IGUAL PAR_ABRE NUM COMA NUM PAR_CIERRA LLAVE_ABRE 
            {
              Object RESULT =null;
		
            int px = Integer.parseInt(((Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).value.toString());
            int py = Integer.parseInt(((Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value.toString());
            ComandoGlobal.comandos.add("ps," + px + "," + py);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // encabezado ::= IGUAL PAR_ABRE NUM COMA NUM PAR_CIERRA LLAVE_ABRE 
            {
              Object RESULT =null;
		 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8 + 1);
           registrarError(sym, "Falta el identificador de instrucción (Ps)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // encabezado ::= error PAR_ABRE NUM COMA NUM PAR_CIERRA LLAVE_ABRE 
            {
              Object RESULT =null;
		 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8 + 2);
           registrarError(sym, "Falta un '='"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // encabezado ::= IGUAL error NUM COMA NUM PAR_CIERRA LLAVE_ABRE 
            {
              Object RESULT =null;
		 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8 + 3);
           registrarError(sym, "Falta un '('"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // encabezado ::= IGUAL PAR_ABRE error COMA NUM PAR_CIERRA LLAVE_ABRE 
            {
              Object RESULT =null;
		 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8 + 4);
           registrarError(sym, "Falta el primer número"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // encabezado ::= IGUAL PAR_ABRE NUM error NUM PAR_CIERRA LLAVE_ABRE 
            {
              Object RESULT =null;
		 errorRecuperado = true;
           Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8 + 5);
           registrarError(sym, "Falta una coma ',' entre los parámetros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // encabezado ::= IGUAL PAR_ABRE NUM COMA error PAR_CIERRA LLAVE_ABRE 
            {
              Object RESULT =null;
		 errorRecuperado = true;
               Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8 + 6);
               registrarError(sym, "Falta un '{'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // encabezado ::= IGUAL PAR_ABRE NUM COMA NUM error LLAVE_ABRE 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8 + 7);
                   registrarError(sym, "Falta un '{'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // encabezado ::= IGUAL PAR_ABRE NUM COMA NUM PAR_CIERRA error 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8 + 8);
                   registrarError(sym, "Falta un '{'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // encabezado ::= IGUAL 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1 + 1);
                   registrarError(sym, "Comando incompleto, debe ser de la forma 'posicion=(x,y){figura};'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // encabezado ::= IGUAL PAR_ABRE 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2 + 2);
                   registrarError(sym, "Comando incompleto, debe ser de la forma 'posicion=(x,y){figura};'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // encabezado ::= IGUAL PAR_ABRE NUM 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3 + 3);
                   registrarError(sym, "Comando incompleto, debe ser de la forma 'posicion=(x,y){figura};'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // encabezado ::= IGUAL PAR_ABRE NUM COMA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4 + 4);
                   registrarError(sym, "Comando incompleto, debe ser de la forma 'posicion=(x,y){figura};'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // encabezado ::= IGUAL PAR_ABRE NUM COMA NUM 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5 + 6);
                   registrarError(sym, "Comando incompleto, debe ser de la forma 'posicion=(x,y){figura};'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // encabezado ::= IGUAL PAR_ABRE NUM COMA NUM PAR_CIERRA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 6 + 6);
                   registrarError(sym, "Comando incompleto, debe ser de la forma 'posicion=(x,y){figura};'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // encabezado ::= IGUAL PAR_ABRE NUM COMA NUM PAR_CIERRA LLAVE_ABRE 
            {
              Object RESULT =null;
		 errorRecuperado = true;
                   Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 7 + 7);
                   registrarError(sym, "Comando incompleto, debe ser de la forma 'posicion=(x,y){figura};'"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // figuras ::= figura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("figuras",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // figuras ::= figuras figura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("figuras",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // figura ::= Rec IGUAL PAR_ABRE NUM COMA NUM COMA C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		
        int ancho = Integer.parseInt(((Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 6)).value.toString());
        int alto = Integer.parseInt(((Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).value.toString());
        String col = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value.toString();
        ComandoGlobal.comandos.add("rec," + ancho + "," + alto + "," + col);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // figura ::= Cir IGUAL PAR_ABRE NUM COMA C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		
        int radio = Integer.parseInt(((Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).value.toString());
        String col = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 2)).value.toString();
        ComandoGlobal.comandos.add("cir," + radio + "," + col);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // figura ::= Ln IGUAL PAR_ABRE NUM COMA NUM COMA C PAR_CIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		
        int x2 = Integer.parseInt(((Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 6)).value.toString());
        int y2 = Integer.parseInt(((Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 4)).value.toString());
        String col = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top - 3)).value.toString();
        ComandoGlobal.comandos.add("ln," + x2 + "," + y2 + "," + col);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // figura ::= Lpr PUNTOCOMA 
            {
              Object RESULT =null;
		 errorRecuperado = true;
        Symbol sym = (Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2 + 1);
        ComandoGlobal.comandos.add("lpr");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
